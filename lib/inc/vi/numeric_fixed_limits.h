/**
 * @file numeric_fixed_limits.h
 * @brief Определяет размеры и предельные значения
 *        для различных целочисленных типов.
 *
 * Этот заголовочный файл предоставляет набор макросов,
 * которые определяют размер (в байтах) и минимальные
 * и максимальные значения для различных типов целых чисел,
 * включая знаковые и беззнаковые целые числа размером 8, 16, 32 и 64 бита.
 *
 * Для каждого целочисленного типа определён макрос, задающий:
 * - Размер в байтах (`VI_<type>_T_SIZE`), например, `VI_U8_T_SIZE`.
 * - Минимальное значение (`VI_<type>_T_MIN`), например, `VI_U8_T_MIN`.
 * - Максимальное значение (`VI_<type>_T_MAX`), например, `VI_U8_T_MAX`.
 *
 * Эти макросы можно использовать для стандартизации и упрощения работы
 * с числовыми пределами в проекте, делая код более читаемым и удобным для поддержки.
 *
 * Макросы сопоставляются с соответствующими платформозависимыми или определёнными в библиотеке
 * макросами, такими как `VI_CHAR_T_SIZE` или `VI_SCHAR_T_MIN`, чтобы обеспечить согласованные
 * размеры и предельные значения типов на разных платформах.
 */

#ifndef VI_NUMERIC_FIXED_LIMITS_H
#define VI_NUMERIC_FIXED_LIMITS_H

#include "numeric_limits.h"

/**
 * @def VI_U8_T_SIZE
 * @brief Размер 8-битного беззнакового целого числа в байтах.
 *
 * Этот макрос определяет размер 8-битного беззнакового целого числа (`vi_u8_t`),
 * который эквивалентен `VI_CHAR_T_SIZE`.
 */
#define VI_U8_T_SIZE VI_CHAR_T_SIZE

/**
 * @def VI_U8_T_MIN
 * @brief Минимальное значение для 8-битного беззнакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 8-битного беззнакового целого числа (`vi_u8_t`),
 * которое эквивалентно `VI_UCHAR_T_MIN`.
 */
#define VI_U8_T_MIN VI_UCHAR_T_MIN

/**
 * @def VI_U8_T_MAX
 * @brief Максимальное значение для 8-битного беззнакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 8-битного беззнакового целого числа (`vi_u8_t`),
 * которое эквивалентно `VI_UCHAR_T_MAX`.
 */
#define VI_U8_T_MAX VI_UCHAR_T_MAX

/**
 * @def VI_S8_T_SIZE
 * @brief Размер 8-битного знакового целого числа в байтах.
 *
 * Этот макрос определяет размер 8-битного знакового целого числа (`vi_s8_t`),
 * который эквивалентен `VI_CHAR_T_SIZE`.
 */
#define VI_S8_T_SIZE VI_CHAR_T_SIZE

/**
 * @def VI_S8_T_MIN
 * @brief Минимальное значение для 8-битного знакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 8-битного знакового целого числа (`vi_s8_t`),
 * которое эквивалентно `VI_SCHAR_T_MIN`.
 */
#define VI_S8_T_MIN VI_SCHAR_T_MIN

/**
 * @def VI_S8_T_MAX
 * @brief Максимальное значение для 8-битного знакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 8-битного знакового целого числа (`vi_s8_t`),
 * которое эквивалентно `VI_SCHAR_T_MAX`.
 */
#define VI_S8_T_MAX VI_SCHAR_T_MAX

/**
 * @def VI_U16_T_SIZE
 * @brief Размер 16-битного беззнакового целого числа в байтах.
 *
 * Этот макрос определяет размер 16-битного беззнакового целого числа (`vi_u16_t`),
 * который эквивалентен `VI_SHORT_T_SIZE`.
 */
#define VI_U16_T_SIZE VI_SHORT_T_SIZE

/**
 * @def VI_U16_T_MIN
 * @brief Минимальное значение для 16-битного беззнакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 16-битного беззнакового целого числа (`vi_u16_t`),
 * которое эквивалентно `VI_USHORT_T_MIN`.
 */
#define VI_U16_T_MIN VI_USHORT_T_MIN

/**
 * @def VI_U16_T_MAX
 * @brief Максимальное значение для 16-битного беззнакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 16-битного беззнакового целого числа (`vi_u16_t`),
 * которое эквивалентно `VI_USHORT_T_MAX`.
 */
#define VI_U16_T_MAX VI_USHORT_T_MAX

/**
 * @def VI_S16_T_SIZE
 * @brief Размер 16-битного знакового целого числа в байтах.
 *
 * Этот макрос определяет размер 16-битного знакового целого числа (`vi_s16_t`),
 * который эквивалентен `VI_SHORT_T_SIZE`.
 */
#define VI_S16_T_SIZE VI_SHORT_T_SIZE

/**
 * @def VI_S16_T_MIN
 * @brief Минимальное значение для 16-битного знакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 16-битного знакового целого числа (`vi_s16_t`),
 * которое эквивалентно `VI_SSHORT_T_MIN`.
 */
#define VI_S16_T_MIN VI_SSHORT_T_MIN

/**
 * @def VI_S16_T_MAX
 * @brief Максимальное значение для 16-битного знакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 16-битного знакового целого числа (`vi_s16_t`),
 * которое эквивалентно `VI_SSHORT_T_MAX`.
 */
#define VI_S16_T_MAX VI_SSHORT_T_MAX

/**
 * @def VI_U32_T_SIZE
 * @brief Размер 32-битного беззнакового целого числа в байтах.
 *
 * Этот макрос определяет размер 32-битного беззнакового целого числа (`vi_u32_t`),
 * который эквивалентен `VI_INT_T_SIZE`.
 */
#define VI_U32_T_SIZE VI_INT_T_SIZE

/**
 * @def VI_U32_T_MIN
 * @brief Минимальное значение для 32-битного беззнакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 32-битного беззнакового целого числа (`vi_u32_t`),
 * которое эквивалентно `VI_UINT_T_MIN`.
 */
#define VI_U32_T_MIN VI_UINT_T_MIN

/**
 * @def VI_U32_T_MAX
 * @brief Максимальное значение для 32-битного беззнакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 32-битного беззнакового целого числа (`vi_u32_t`),
 * которое эквивалентно `VI_UINT_T_MAX`.
 */
#define VI_U32_T_MAX VI_UINT_T_MAX

/**
 * @def VI_S32_T_SIZE
 * @brief Размер 32-битного знакового целого числа в байтах.
 *
 * Этот макрос определяет размер 32-битного знакового целого числа (`vi_s32_t`),
 * который эквивалентен `VI_INT_T_SIZE`.
 */
#define VI_S32_T_SIZE VI_INT_T_SIZE

/**
 * @def VI_S32_T_MIN
 * @brief Минимальное значение для 32-битного знакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 32-битного знакового целого числа (`vi_s32_t`),
 * которое эквивалентно `VI_SINT_T_MIN`.
 */
#define VI_S32_T_MIN VI_SINT_T_MIN

/**
 * @def VI_S32_T_MAX
 * @brief Максимальное значение для 32-битного знакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 32-битного знакового целого числа (`vi_s32_t`),
 * которое эквивалентно `VI_SINT_T_MAX`.
 */
#define VI_S32_T_MAX VI_SINT_T_MAX

/**
 * @def VI_U64_T_SIZE
 * @brief Размер 64-битного беззнакового целого числа в байтах.
 *
 * Этот макрос определяет размер 64-битного беззнакового целого числа (`vi_u64_t`),
 * который эквивалентен `VI_LLONG_T_SIZE`.
 */
#define VI_U64_T_SIZE VI_LLONG_T_SIZE

/**
 * @def VI_U64_T_MIN
 * @brief Минимальное значение для 64-битного беззнакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 64-битного беззнакового целого числа (`vi_u64_t`),
 * которое эквивалентно `VI_ULLONG_T_MIN`.
 */
#define VI_U64_T_MIN VI_ULLONG_T_MIN

/**
 * @def VI_U64_T_MAX
 * @brief Максимальное значение для 64-битного беззнакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 64-битного беззнакового целого числа (`vi_u64_t`),
 * которое эквивалентно `VI_ULLONG_T_MAX`.
 */
#define VI_U64_T_MAX VI_ULLONG_T_MAX

/**
 * @def VI_S64_T_SIZE
 * @brief Размер 64-битного знакового целого числа в байтах.
 *
 * Этот макрос определяет размер 64-битного знакового целого числа (`vi_s64_t`),
 * который эквивалентен `VI_LLONG_T_SIZE`.
 */
#define VI_S64_T_SIZE VI_LLONG_T_SIZE

/**
 * @def VI_S64_T_MIN
 * @brief Минимальное значение для 64-битного знакового целого числа.
 *
 * Этот макрос определяет минимально возможное значение
 * для 64-битного знакового целого числа (`vi_s64_t`),
 * которое эквивалентно `VI_SLLONG_T_MIN`.
 */
#define VI_S64_T_MIN VI_SLLONG_T_MIN

/**
 * @def VI_S64_T_MAX
 * @brief Максимальное значение для 64-битного знакового целого числа.
 *
 * Этот макрос определяет максимально возможное значение
 * для 64-битного знакового целого числа (`vi_s64_t`),
 * которое эквивалентно `VI_SLLONG_T_MAX`.
 */
#define VI_S64_T_MAX VI_SLLONG_T_MAX

#endif // VI_NUMERIC_FIXED_LIMITS_H
