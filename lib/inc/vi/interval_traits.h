/**
 * @file interval_traits.h
 * @brief Набор макросов для работы с интервалами.
 *
 * Этот файл содержит макросы для проверки валидности интервалов с различными типами границ
 * (замкнутые, открытые, левые и правые открытые границы) и для проверки, находится ли
 * значение внутри интервала с указанными типами границ.
 *
 * Макросы позволяют легко проверять, является ли интервал валидным
 * и содержится ли значение в интервале с учетом типа границ.
 */

#ifndef VI_INTERVAL_TRAITS_H
#define VI_INTERVAL_TRAITS_H

/**
 * @def vi_interval_is_valid_closed
 * @brief Проверяет, является ли интервал с замкнутыми границами валидным.
 *
 * Этот макрос проверяет, что значение переменной `lower` меньше
 * или равно значению переменной `upper`, что гарантирует,
 * что интервал с замкнутыми границами является валидным.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 *
 * @return Возвращает значение выражения `lower <= upper`,
 *         что истинно, если интервал валиден.
 */
#define vi_interval_is_valid_closed(lower, upper) (lower <= upper)

/**
 * @def vi_interval_is_valid_left_opened
 * @brief Проверяет, является ли интервал с левой открытой границей валидным.
 *
 * Этот макрос проверяет, что значение переменной `lower`
 * строго меньше значения переменной `upper`, что гарантирует,
 * что интервал с левой открытой границей является валидным.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 *
 * @return Возвращает значение выражения `lower < upper`,
 *         что истинно, если интервал валиден.
 */
#define vi_interval_is_valid_left_opened(lower, upper) (lower < upper)

/**
 * @def vi_interval_is_valid_right_opened
 * @brief Проверяет, является ли интервал с правой открытой границей валидным.
 *
 * Этот макрос проверяет, что значение переменной `lower` меньше
 * или равно значению переменной `upper`, что гарантирует,
 * что интервал с правой открытой границей является валидным.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 *
 * @return Возвращает значение выражения `lower <= upper`,
 *         что истинно, если интервал валиден.
 */
#define vi_interval_is_valid_right_opened(lower, upper) (lower <= upper)

/**
 * @def vi_interval_is_valid_opened
 * @brief Проверяет, является ли интервал с обеими открытыми границами валидным.
 *
 * Этот макрос проверяет, что значение переменной `lower`
 * строго меньше значения переменной `upper`, что гарантирует,
 * что интервал с обеими открытыми границами является валидным.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 *
 * @return Возвращает значение выражения `lower < upper`,
 *         что истинно, если интервал валиден.
 */
#define vi_interval_is_valid_opened(lower, upper) (lower < upper)

/**
 * @def vi_interval_has_closed
 * @brief Проверяет, содержится ли значение в замкнутом интервале.
 *
 * Этот макрос проверяет, что значение переменной `value` лежит в пределах интервала,
 * включая обе границы (нижнюю и верхнюю), то есть интервал с замкнутыми границами.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 * @param value Значение, которое проверяется на принадлежность интервалу.
 *
 * @return Возвращает `true`, если значение `value` лежит в интервале [lower, upper],
 *         и `false` в противном случае.
 */
#define vi_interval_has_closed(lower, upper, value) ((value) >= (lower) && (value) <= (upper))

/**
 * @def vi_interval_has_left_opened
 * @brief Проверяет, содержится ли значение в интервале с левой открытой границей.
 *
 * Этот макрос проверяет, что значение переменной `value` лежит в пределах интервала,
 * где нижняя граница не включена (левая открытая граница), а верхняя граница включена.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 * @param value Значение, которое проверяется на принадлежность интервалу.
 *
 * @return Возвращает `true`, если значение `value` лежит в интервале (lower, upper],
 *         и `false` в противном случае.
 */
#define vi_interval_has_left_opened(lower, upper, value) ((value) > (lower) && (value) <= (upper))

/**
 * @def vi_interval_has_right_opened
 * @brief Проверяет, содержится ли значение в интервале с правой открытой границей.
 *
 * Этот макрос проверяет, что значение переменной `value` лежит в пределах интервала,
 * где верхняя граница не включена (правая открытая граница), а нижняя граница включена.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 * @param value Значение, которое проверяется на принадлежность интервалу.
 *
 * @return Возвращает `true`, если значение `value` лежит в интервале [lower, upper),
 *         и `false` в противном случае.
 */
#define vi_interval_has_right_opened(lower, upper, value) ((value) >= (lower) && (value) < (upper))

/**
 * @def vi_interval_has_opened
 * @brief Проверяет, содержится ли значение в интервале с обеими открытыми границами.
 *
 * Этот макрос проверяет, что значение переменной `value` лежит в пределах интервала,
 * где обе границы (нижняя и верхняя) не включены.
 *
 * @param lower Нижняя граница интервала.
 * @param upper Верхняя граница интервала.
 * @param value Значение, которое проверяется на принадлежность интервалу.
 *
 * @return Возвращает `true`, если значение `value` лежит в интервале (lower, upper),
 *         и `false` в противном случае.
 */
#define vi_interval_has_opened(lower, upper, value) ((value) > (lower) && (value) < (upper))

#endif // VI_INTERVAL_TRAITS_H
