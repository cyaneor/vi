/**
 * @file initializer.h
 * @brief Заголовочный файл, содержащий макросы для инициализации объектов и структур.
 *
 * Данный файл предоставляет два макроса: `vi_initializer` и `vi_struct_initializer`,
 * которые облегчают процесс инициализации объектов и структур с использованием
 * аргументов переменной длины. Эти макросы позволяют разработчикам удобно
 * инициализировать объекты с множеством параметров, минимизируя количество
 * повторяющегося кода и упрощая синтаксис инициализации.
 *
 * Макрос `vi_initializer` позволяет инициализировать объект или структуру,
 * принимая произвольное количество аргументов, что делает его полезным для
 * работы с объектами, имеющими различные параметры.
 *
 * Макрос `vi_struct_initializer` предназначен для инициализации структур,
 * используя аргументы переменной длины, и обеспечивает совместимость с
 * макросом `vi_initializer` для выполнения инициализации.
 *
 * @note Будьте внимательны при использовании данных макросов,
 *       так как они принимают произвольное количество аргументов.
 *
 *       Убедитесь, что переданные аргументы
 *       соответствуют ожидаемым типам и количеству.
 *
 * Примеры использования макросов:
 * @code
 * vi_initializer(my_object, param1, param2, param3);
 *
 * struct MyStruct {
 *     int a;
 *     float b;
 * };
 *
 * struct MyStruct my_instance = vi_struct_initializer(MyStruct, 10, 3.14f);
 * @endcode
 */

#ifndef VI_INITIALIZER_H
#define VI_INITIALIZER_H

/**
 * @def vi_initializer
 * @brief Инициализация объекта или структуры с аргументами переменной длины.
 *
 * Этот макрос позволяет инициализировать объект или структуру, передавая
 * произвольное количество аргументов. Это может быть полезно для удобной
 * инициализации объектов с множеством параметров.
 *
 * @param ... Аргументы инициализации, которые будут переданы в тело макроса.
 *
 * @note Будьте внимательны при использовании этого макроса, так как он
 *       принимает произвольное количество аргументов. Убедитесь, что
 *       переданные аргументы соответствуют ожидаемым типам и количеству.
 *
 * Пример использования:
 * @code
 * vi_initializer(my_object, param1, param2, param3);
 * @endcode
 */
#define vi_initializer(...) {__VA_ARGS__}

/**
 * @def vi_struct_initializer
 * @brief Инициализация структуры с использованием аргументов переменной длины.
 *
 * Этот макрос позволяет инициализировать структуру типа T, передавая
 * произвольное количество аргументов. Он использует другой макрос
 * `vi_initializer` для выполнения инициализации.
 *
 * @param T Тип структуры, которую необходимо инициализировать.
 * @param ... Аргументы инициализации, которые будут переданы в макрос
 *            `vi_initializer`.
 *
 * @note Убедитесь, что переданные аргументы соответствуют полям структуры
 *       типа T. Неправильные аргументы могут привести к неопределенному
 *       поведению.
 *
 * Пример использования:
 * @code
 * struct MyStruct {
 *     int a;
 *     float b;
 * };
 *
 * struct MyStruct my_instance = vi_struct_initializer(MyStruct, 10, 3.14f);
 * @endcode
 */
#ifdef __cplusplus
#    define vi_struct_initializer(T, ...) vi_initializer(__VA_ARGS__)
#else
#    define vi_struct_initializer(T, ...) (struct T) vi_initializer(__VA_ARGS__)
#endif // __cplusplus

#endif // VI_INITIALIZER_H
