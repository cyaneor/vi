# -------------------------------------------------------------------------------------------- #
# Настройка проекта                                                                            #
# -------------------------------------------------------------------------------------------- #

# Задаем минимально необходимую версию для CMake.
cmake_minimum_required(VERSION 3.12)

# Устанавливаем название, версию, описание и основной язык проекта.
project(${CMAKE_PROJECT_NAME}
        VERSION 1.0.0
        DESCRIPTION "Versatile")

# Задаем стандарт который должен использовать компилятор.
set(CMAKE_C_STANDARD 11)

# Без этой опции компилятор может попытаться использовать
# ближайший поддерживаемый стандарт, если запрашиваемый не поддерживается.
set(CMAKE_C_STANDARD_REQUIRED ON)

# -------------------------------------------------------------------------------------------- #
# Глобальные переменные                                                                        #
# -------------------------------------------------------------------------------------------- #

# Путь к текущему каталогу
set(VI_CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Путь к кэш-каталогу, который в данный момент обрабатывается.
set(VI_CMAKE_CURRENT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

# Путь к каталогу модулей для CMake
set(VI_CMAKE_CURRENT_MODULE_DIR ${VI_CMAKE_CURRENT_SOURCE_DIR}/cmake/module)

# -------------------------------------------------------------------------------------------- #
# Модули                                                                                       #
# -------------------------------------------------------------------------------------------- #

# Конфигурация путей исходных и заголовочных файлов.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/environment_paths.cmake)

# Скрипт сбора исходных файлов.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/collect_source_files.cmake)

# Конфигурация и проброс определений для целевой платформы.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/compile_definitions.cmake)

# Скрипт преобразует версию проекта в список компонентов.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/parse_version.cmake)

# Генерация лимитов для целочисленных типов.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/generate_numeric_limits.cmake)

# Конфигурация генерации документации.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/generate_doxygen.cmake)

# Конфигурация опций для сборки и управления параметрами библиотеки.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/toggle_options.cmake)

# Получает все активированные опции и добавляет их в список определений компиляции.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/collect_options.cmake)

# Включает файл sync_static_build_option.cmake, который синхронизирует необходимые параметры и макросы
# между проектами при статической сборке, обеспечивая правильную настройку для обоих проектов.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/sync_static_build_option.cmake)

# -------------------------------------------------------------------------------------------- #
# Цели для сборки                                                                              #
# -------------------------------------------------------------------------------------------- #

# Включает конфигурацию для создания библиотеки по умолчанию, основываясь на настройках сборки.
include(${VI_CMAKE_CURRENT_MODULE_DIR}/build_library.cmake)

# -------------------------------------------------------------------------------------------- #
# Добавление каталогов и определений                                                           #
# -------------------------------------------------------------------------------------------- #

# Добавление каталогов заголовков для цели сборки.
target_include_directories(${PROJECT_NAME}
        PUBLIC ${VI_TARGET_INCLUDE_DIR})

# Добавление определений компиляции для цели сборки.
target_compile_definitions(${PROJECT_NAME}
        PRIVATE ${VI_TARGET_PRIVATE_COMPILE_DEFINITIONS}
        PUBLIC ${VI_TARGET_PUBLIC_COMPILE_DEFINITIONS})